//EvaluateDoseVolumeHistograms.cc - A part of DICOMautomaton 2018. Written by hal clark.

#include <boost/interprocess/creation_tags.hpp>
#include <boost/interprocess/sync/named_mutex.hpp>
#include <boost/interprocess/sync/scoped_lock.hpp>
#include <algorithm>
#include <cstdlib>            //Needed for exit() calls.
#include <exception>
#include <experimental/any>
#include <experimental/optional>
#include <fstream>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <memory>
#include <regex>
#include <stdexcept>
#include <string>    
#include <utility>            //Needed for std::pair.
#include <vector>

#include "../Structs.h"
#include "../Regex_Selectors.h"
#include "../YgorImages_Functors/Compute/AccumulatePixelDistributions.h"
#include "EvaluateDoseVolumeHistograms.h"
#include "Explicator.h"       //Needed for Explicator class.
#include "YgorFilesDirs.h"    //Needed for Does_File_Exist_And_Can_Be_Read(...), etc..
#include "YgorImages.h"
#include "YgorMath.h"         //Needed for vec3 class.
#include "YgorMisc.h"         //Needed for FUNCINFO, FUNCWARN, FUNCERR macros.
#include "YgorStats.h"        //Needed for Stats:: namespace.



OperationDoc OpArgDocEvaluateDoseVolumeHistograms(void){
    OperationDoc out;
    out.name = "EvaluateDoseVolumeHistograms";

    out.desc = 
        " This operation evaluates dose-volume histograms for the selected ROI(s).";
        
    out.notes.emplace_back(
        "This routine generates cumulative DVHs with absolute dose on the x-axis and fractional volume on the y-axis."
    );
        
    out.notes.emplace_back(
        "This routine will naively treat voxels of different size with the same weighting rather than weighting each"
        " voxel using its spatial extent. This is done to improve precision and reduce numerical issues. If"
        " necessary, resample images to have uniform spatial extent."
    );
        
    out.notes.emplace_back(
        "This routine will combine spatially-overlapping images by summing voxel intensities. It will not"
        " combine separate image_arrays though. If needed, you'll have to perform a meld on them beforehand."
    );


    out.args.emplace_back();
    out.args.back() = IAWhitelistOpArgDoc();
    out.args.back().name = "ImageSelection";
    out.args.back().default_val = "last";
    
    out.args.emplace_back();
    out.args.back().name = "OutFileName";
    out.args.back().desc = "A filename (or full path) in which to append the histogram data generated by this routine."
                      " The format is a two-column data file suitable for plotting. A short header"
                      " separates entries. Leave empty to dump to generate a unique temporary file.";
    out.args.back().default_val = "";
    out.args.back().expected = true;
    out.args.back().examples = { "", "/tmp/somefile", "localfile.dat", "derivative_data.dat" };
    out.args.back().mimetype = "text/plain";


    out.args.emplace_back();
    out.args.back().name = "NormalizedROILabelRegex";
    out.args.back().desc = "A regex matching the ROI labels/names to consider. The default will match"
                      " all available ROIs. Be aware that input spaces are trimmed to a single space."
                      " If your ROI name has more than two sequential spaces, use regex to avoid them."
                      " All ROIs have to match the single regex, so use the 'or' token if needed."
                      " Regex is case insensitive and uses extended POSIX syntax.";
    out.args.back().default_val = ".*";
    out.args.back().expected = true;
    out.args.back().examples = { ".*", ".*Body.*", "Body", "Gross_Liver",
                            R"***(.*Left.*Parotid.*|.*Right.*Parotid.*|.*Eye.*)***",
                            R"***(Left Parotid|Right Parotid)***" };

    out.args.emplace_back();
    out.args.back().name = "ROILabelRegex";
    out.args.back().desc = "A regex matching the ROI labels/names to consider. The default will match"
                      " all available ROIs. Be aware that input spaces are trimmed to a single space."
                      " If your ROI name has more than two sequential spaces, use regex to avoid them."
                      " All ROIs have to match the single regex, so use the 'or' token if needed."
                      " Regex is case insensitive and uses extended POSIX syntax.";
    out.args.back().default_val = ".*";
    out.args.back().expected = true;
    out.args.back().examples = { ".*", ".*body.*", "body", "Gross_Liver",
                            R"***(.*left.*parotid.*|.*right.*parotid.*|.*eyes.*)***",
                            R"***(left_parotid|right_parotid)***" };

    out.args.emplace_back();
    out.args.back().name = "dDose";
    out.args.back().desc = "The (fixed) bin width, in units of dose.";
    out.args.back().default_val = "2.0";
    out.args.back().expected = true;
    out.args.back().examples = { "0.1", "0.5", "2.0", "5.0", "10", "50" };


    out.args.emplace_back();
    out.args.back().name = "UserComment";
    out.args.back().desc = "A string that will be inserted into the output file which will simplify merging output"
                      " with differing parameters, from different sources, or using sub-selections of the data."
                      " If left empty, the column will be omitted from the output.";
    out.args.back().default_val = "";
    out.args.back().expected = false;
    out.args.back().examples = { "Using XYZ", "Patient treatment plan C" };

    return out;
}



Drover EvaluateDoseVolumeHistograms(Drover DICOM_data, OperationArgPkg OptArgs, std::map<std::string,std::string> /*InvocationMetadata*/, std::string FilenameLex){

    //---------------------------------------------- User Parameters --------------------------------------------------
    const auto ImageSelectionStr = OptArgs.getValueStr("ImageSelection").value();

    auto OutFilename = OptArgs.getValueStr("OutFileName").value();
    const auto ROILabelRegex = OptArgs.getValueStr("ROILabelRegex").value();
    const auto NormalizedROILabelRegex = OptArgs.getValueStr("NormalizedROILabelRegex").value();
    const auto dD = std::stod(OptArgs.getValueStr("dDose").value());

    const auto UserComment = OptArgs.getValueStr("UserComment");

    //-----------------------------------------------------------------------------------------------------------------

    Explicator X(FilenameLex);


    //Merge the image arrays if necessary.
    if(DICOM_data.image_data.empty()){
        throw std::invalid_argument("This routine requires at least one image array. Cannot continue");
    }

    //Stuff references to all contours into a list. Remember that you can still address specific contours through
    // the original holding containers (which are not modified here).
    auto cc_all = All_CCs( DICOM_data );
    auto cc_ROIs = Whitelist( cc_all, { { "ROIName", ROILabelRegex },
                                        { "NormalizedROIName", NormalizedROILabelRegex } } );
    if(cc_ROIs.empty()){
        throw std::invalid_argument("No contours selected. Cannot continue.");
    }

    std::string patient_ID;
    if( auto o = cc_ROIs.front().get().contours.front().GetMetadataValueAs<std::string>("PatientID") ){
        patient_ID = o.value();
    }else if( auto o = cc_ROIs.front().get().contours.front().GetMetadataValueAs<std::string>("StudyInstanceUID") ){
        patient_ID = o.value();
    }else{
        patient_ID = "unknown_person";
    }

    //-----------------------------------------------------------------------------------------------------------------
    auto IAs_all = All_IAs( DICOM_data );
    auto IAs = Whitelist( IAs_all, ImageSelectionStr );
    for(auto & iap_it : IAs){
        //Accumulate the voxel intensity distributions.
        AccumulatePixelDistributionsUserData ud;

        if(!(*iap_it)->imagecoll.Compute_Images( AccumulatePixelDistributions, { },
                                                   cc_ROIs, &ud )){
            throw std::runtime_error("Unable to accumulate pixel distributions.");
        }

        std::map<std::string, std::map<double,double>> dvhs;
        {
            for(const auto &av : ud.accumulated_voxels){
                const auto lROIname = av.first;

                if(av.second.empty()){
                    FUNCWARN("Asked to compute DVH when no voxels appear to have any dose. This is physically possible, but please be sure it is what you expected");
                    //Could be due to:
                    // -contours being too small (much smaller than voxel size).
                    // -dose and contours not aligning properly. Maybe due to incorrect offsets/rotations/coordinate system?
                    // -dose/contours not being present. Maybe accidentally?
                    dvhs[lROIname][0.0] = 0.0; //Nothing over 0Gy is delivered to any voxel (0% of volume).
                }else{
                    const auto D_min = std::min( 0.0, Stats::Min(av.second) );
                    const double N = static_cast<double>(av.second.size());

                    for(size_t i = 0;  ; ++i){
                        const double test_dose = D_min + (dD * i);
                        double cumulative = 0.0;
                        for(double i : av.second){
                            if(i >= test_dose) cumulative += 1.0;
                        }

                        const auto dose = test_dose; // No scaling.
                        const auto frac = cumulative / N;
                        dvhs[lROIname][dose] = frac;
                        if(cumulative < 1.0) break;
                    }
                }
            }
        }


        //Report the findings. 
        FUNCINFO("Attempting to claim a mutex");
        try{
            //File-based locking is used so this program can be run over many patients concurrently.
            //
            //Try open a named mutex. Probably created in /dev/shm/ if you need to clear it manually...
            boost::interprocess::named_mutex mutex(boost::interprocess::open_or_create,
                                                   "dicomautomaton_operation_evaluatendvhs_mutex");
            boost::interprocess::scoped_lock<boost::interprocess::named_mutex> lock(mutex);

            if(OutFilename.empty()){
                OutFilename = Get_Unique_Sequential_Filename("/tmp/dicomautomaton_evaluatendvhs_", 6, ".dat");
            }
            std::fstream FO(OutFilename, std::fstream::out | std::fstream::app);
            if(!FO){
                throw std::runtime_error("Unable to open file for reporting derivative data. Cannot continue.");
            }
            for(const auto &av : ud.accumulated_voxels){
                const auto lROIname = av.first;

                if(UserComment){
                    FO << "# UserComment: " << UserComment.value() << std::endl;
                }
                FO << "# PatientID: "         << patient_ID << std::endl;
                FO << "# ROIname: "           << lROIname << std::endl;
                FO << "# NormalizedROIname: " << X(lROIname) << std::endl;
                FO << "# DoseMin: "           << Stats::Min(av.second) << std::endl;
                FO << "# DoseMax: "           << Stats::Max(av.second) << std::endl;
                FO << "# VoxelCount: "        << av.second.size() << std::endl;
                for(const auto &p : dvhs[lROIname]){
                    FO << p.first << " " << p.second << "\n";
                }
            }
            FO.flush();
            FO.close();

        }catch(const std::exception &e){
            FUNCERR("Unable to write to output dose-volume histogram file: '" << e.what() << "'");
        }
    }

    return DICOM_data;
}
