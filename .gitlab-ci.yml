# This is a definition file for GitLab CI.

default:
  timeout: 360m

stages:
  - build
  - test
  - deploy

#######################################################################################################################
### Building stages.
#######################################################################################################################
# These stages test the Docker implementation scripts for installing and building all needed dependencies, building
# DICOMautomaton, testing the built binaries (within the compilation environment), and then building an AppImage.

# CI build on Debian stable.
# Notes: reduced (or missing) optimization, some components may be missing.
build_ci_debian_stable:
  stage: build
  needs: []
  image: "debian:stable"
  before_script:
    - "cp -R ./docker/builders/ci /scratch"
    - "cp -R . /dcma"
  script:
    - |
      ( ( while true ; do sleep 225 ; printf '\n\n' ; df -h ; printf '\n\n' ; free -h ; printf '\n\n' ; done ) &)
      "./docker/builders/ci/implementation_ci_debian_stable.sh"
      "./integration_tests/Run.sh"
      "./scripts/extract_system_appimage.sh"
  artifacts:
    paths:
      - "AppDir"
      - "DICOMautomaton*AppImage"

# CI build on Arch Linux.
# Notes: reduced (or missing) optimization, some components may be missing.
build_ci_arch:
  stage: build
  needs: []
  image: "archlinux:latest"
  before_script:
    - "cp -R ./docker/builders/ci /scratch"
    - "cp -R . /dcma"
  script:
    - |
      ( ( while true ; do sleep 225 ; printf '\n\n' ; df -h ; printf '\n\n' ; free -h ; printf '\n\n' ; done ) &)
      "./docker/builders/ci/implementation_ci_arch.sh"
      "./integration_tests/Run.sh"
      "./scripts/extract_system_appimage.sh"
  artifacts:
    paths:
      - "AppDir"
      - "DICOMautomaton*AppImage"

# Perform a cross-compile with MXE.
# Notes: reduced (or missing) optimization, some components may be missing.
cross_compile_mxe:
  stage: build
  needs: []
  image: "hdclark/dcma_build_base_mxe:latest"
  before_script:
    - "cp -R . /dcma"
  script:
    - |
      ( ( while true ; do sleep 225 ; printf '\n\n' ; df -h ; printf '\n\n' ; free -h ; printf '\n\n' ; done ) &)
      "./docker/builders/mxe/implementation_mxe.sh"
  artifacts:
    paths:
      - "/out"

## Full Arch Linux build.
#build_arch:
#  stage: build
#  needs: []
#  image: "archlinux:latest"
#  before_script:
#    - "cp -R ./docker/build_bases/arch /scratch_base"
#    - "cp -R ./docker/builders/arch /scratch"
#    - "cp -R . /dcma"
#  script:
#    - |
#      ( ( while true ; do sleep 225 ; printf '\n\n' ; df -h ; printf '\n\n' ; free -h ; printf '\n\n' ; done ) &)
#      "/scratch_base/implementation_arch.sh"
#      "/scratch/implementation_arch.sh"
##  artifacts:
##    paths:
##      - mybinary
##      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
##      # cache:
##      #   paths:
##      #     - "*.o"

#######################################################################################################################
### Testing stages.
#######################################################################################################################
# These stages test the use of AppImage build artifacts on pristine systems. They basically test portability of the
# AppImage distribution.

# Same-system testing.
test_ci_debian_stable_on_debian_stable:
  stage: test
  needs: ["build_ci_debian_stable"]
  image: "debian:stable"
  script:
    # Provide minimal system libraries.
    - "export DEBIAN_FRONTEND='noninteractive'"
    - "apt-get update --yes"
    #- "apt-get install --yes --no-install-recommends git rsync mesa-utils libfreetype6 libstdc++6"
    - "apt-get install --yes --no-install-recommends git rsync mesa-utils libfreetype6 g++"
    # Unpack the AppImage and overlay it in the containers root filesystem.
    - "chmod 777 DICOMautomaton*AppImage"
    - "./DICOMautomaton*AppImage --appimage-extract"
    - "rsync -a ./squashfs-root/usr/ /usr/"
    # Ensure it can be run and then run tests.
    - "dicomautomaton_dispatcher -h"
    - "./integration_tests/Run.sh"

test_ci_arch_on_arch:
  stage: test
  needs: ["build_ci_arch"]
  image: "archlinux:latest"
  script:
    # Provide minimal system libraries.
    # NOTE: may be required for older Arch Linux images.
    #- "curl -o /etc/pacman.d/mirrorlist 'https://www.archlinux.org/mirrorlist/?country=all&protocol=http&ip_version=4&use_mirror_status=on'"
    #- "sed -i 's/^#Server/Server/' /etc/pacman.d/mirrorlist"
    #- "sed -i -e 's/SigLevel[ ]*=.*/SigLevel = Never/g' -e 's/.*IgnorePkg[ ]*=.*/IgnorePkg = archlinux-keyring/g' /etc/pacman.conf"
    - "pacman -Syu --noconfirm --needed git rsync mesa freetype2 gcc-libs"
    # Unpack the AppImage and overlay it in the containers root filesystem.
    - "chmod 777 DICOMautomaton*AppImage"
    - "./DICOMautomaton*AppImage --appimage-extract"
    - "rsync -a ./squashfs-root/usr/ /usr/"
    # Ensure it can be run and then run tests.
    - "dicomautomaton_dispatcher -h"
    - "./integration_tests/Run.sh"

# Cross-system testing.
test_ci_debian_stable_on_arch:
  stage: test
  needs: ["build_ci_debian_stable"]
  image: "archlinux:latest"
  script:
    # Provide minimal system libraries.
    # NOTE: may be required for older Arch Linux images.
    #- "curl -o /etc/pacman.d/mirrorlist 'https://www.archlinux.org/mirrorlist/?country=all&protocol=http&ip_version=4&use_mirror_status=on'"
    #- "sed -i 's/^#Server/Server/' /etc/pacman.d/mirrorlist"
    #- "sed -i -e 's/SigLevel[ ]*=.*/SigLevel = Never/g' -e 's/.*IgnorePkg[ ]*=.*/IgnorePkg = archlinux-keyring/g' /etc/pacman.conf"
    - "pacman -Syu --noconfirm --needed git rsync mesa freetype2 gcc-libs"
    # Unpack the AppImage and overlay it in the containers root filesystem.
    - "chmod 777 DICOMautomaton*AppImage"
    - "./DICOMautomaton*AppImage --appimage-extract"
    - "rsync -a ./squashfs-root/usr/ /usr/"
    # Ensure it can be run and then run tests.
    - "dicomautomaton_dispatcher -h"
    - "./integration_tests/Run.sh"

test_ci_debian_stable_on_ubuntu_latest:
  stage: test
  needs: ["build_ci_debian_stable"]
  image: "ubuntu:latest"
  script:
    # Provide minimal system libraries.
    - "export DEBIAN_FRONTEND='noninteractive'"
    - "apt-get update --yes"
    #- "apt-get install --yes --no-install-recommends git rsync mesa-utils libfreetype6 libstdc++6"
    - "apt-get install --yes --no-install-recommends git rsync mesa-utils libfreetype6 g++"
    # Unpack the AppImage and overlay it in the containers root filesystem.
    #- "apt-get install --yes --no-install-recommends wget ca-certificates"
    #- "wget --no-check-certificate 'https://hdclark.github.io/DICOMautomaton-x86_64.AppImage'"
    - "chmod 777 DICOMautomaton*AppImage"
    - "./DICOMautomaton*AppImage --appimage-extract"
    - "rsync -a ./squashfs-root/usr/ /usr/"
    # Ensure it can be run and then run tests.
    - "dicomautomaton_dispatcher -h"
    #- git clone 'https://github.com/hdclark/DICOMautomaton'
    #- cd DICOMautomaton
    - "./integration_tests/Run.sh"

test_ci_debian_stable_on_fedora_latest:
  stage: test
  needs: ["build_ci_debian_stable"]
  image: "fedora:latest"
  script:
    # Provide minimal system libraries.
    - "dnf -y upgrade"
    - "dnf -y install bash findutils git rsync mesa-libGL freetype libgcc libstdc++"
    # Unpack the AppImage and overlay it in the containers root filesystem.
    #- "dnf -y install wget ca-certificates"
    #- "wget --no-check-certificate 'https://hdclark.github.io/DICOMautomaton-x86_64.AppImage'"
    - "chmod 777 DICOMautomaton*AppImage"
    - "./DICOMautomaton*AppImage --appimage-extract"
    - "rsync -a ./squashfs-root/usr/ /usr/"
    # Ensure it can be run and then run tests.
    - "dicomautomaton_dispatcher -h"
    #- "git clone 'https://github.com/hdclark/DICOMautomaton'"
    #- "cd DICOMautomaton"
    - "./integration_tests/Run.sh"

#######################################################################################################################
### Deployment stages.
#######################################################################################################################

deploy_ci_debian_stable:
  stage: deploy
  needs: ["test_ci_debian_stable_on_debian_stable"]
  script:
    - "echo 'Deployment placeholder successful'"

