exit


0. Generate a 'compile_commands.json'. The easiest way is to run the normal compilation, copy it, and adjust the base path.

   $>  cd /dcma && 
       export CC='clang' &&
       export CXX='clang++' &&
       timeout 10 ./compile_and_install.sh -c  # You do NOT need to wait for full compilation.

1. Run clang-check

   $>  cp /tmp/dcma_build/build/compile_commands.json ./ &&
       sed -i -e 's@/tmp/dcma_build/build/@/dcma/@g' -e 's@/tmp/dcma_build/@/dcma/@g' ./compile_commands.json &&
       clang-check -fixit -analyze -p compile_commands.json src/Structs.cc

2. Run clang-tidy (note: can also include static analysis checks!)

   $>  cp /tmp/dcma_build/build/compile_commands.json ./ &&
       sed -i -e 's@/tmp/dcma_build/build/@/dcma/@g' -e 's@/tmp/dcma_build/@/dcma/@g' ./compile_commands.json &&
       find src/ -type f -iname '*.cc' -exec \
       clang-tidy \
         -p compile_commands.json \
         --fix --fix-errors \
         --header-filter='.*h' \
         --checks='-*,clang-analyzer-*,clang-diagnostic*,modernize*,misc*,performance*,boost*,bugprone*' \
         '{}' \;  2>&1 | tee -a /tmp/clang_tidy_output.txt # src/*.cc src/Ygor*/*/*cc Operations/*.cc 

